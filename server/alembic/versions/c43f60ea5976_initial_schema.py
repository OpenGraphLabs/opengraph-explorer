"""initial_schema

Revision ID: c43f60ea5976
Revises: 
Create Date: 2025-07-24 14:25:33.303132

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c43f60ea5976'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dictionaries',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('google_id', sa.String(), nullable=True),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('profile_image_url', sa.String(), nullable=True),
    sa.Column('sui_address', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_sui_address'), 'users', ['sui_address'], unique=True)
    op.create_table('datasets',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('created_by', sa.BigInteger(), nullable=True),
    sa.Column('dictionary_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dictionary_id'], ['dictionaries.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dictionary_categories',
    sa.Column('dictionary_id', sa.BigInteger(), nullable=False),
    sa.Column('category_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dictionary_id'], ['dictionaries.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dictionary_id', 'category_id')
    )
    op.create_table('images',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('file_name', sa.String(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('dataset_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_images_dataset_id'), 'images', ['dataset_id'], unique=False)
    op.create_table('annotations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('bbox', sa.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('segmentation_size', sa.ARRAY(sa.BigInteger(), dimensions=1), nullable=True),
    sa.Column('segmentation_counts', sa.String(), nullable=True),
    sa.Column('polygon', sa.Text(), nullable=True),
    sa.Column('point_coords', sa.ARRAY(sa.Float(), dimensions=2), nullable=True),
    sa.Column('is_crowd', sa.Boolean(), nullable=False),
    sa.Column('predicted_iou', sa.Float(), nullable=True),
    sa.Column('stability_score', sa.Float(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('source_type', sa.String(), nullable=False),
    sa.Column('image_id', sa.BigInteger(), nullable=False),
    sa.Column('category_id', sa.BigInteger(), nullable=True),
    sa.Column('created_by', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("source_type IN ('AUTO', 'USER')", name='check_annotation_source_type'),
    sa.CheckConstraint("status IN ('PENDING', 'APPROVED', 'REJECTED')", name='check_annotation_status'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_annotations_created_by'), 'annotations', ['created_by'], unique=False)
    op.create_index(op.f('ix_annotations_image_id'), 'annotations', ['image_id'], unique=False)
    op.create_table('user_annotation_selections',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('image_id', sa.BigInteger(), nullable=False),
    sa.Column('category_id', sa.BigInteger(), nullable=True),
    sa.Column('selected_annotation_ids_key', sa.String(length=500), nullable=False, comment="Comma-separated sorted annotation IDs (e.g., '1,3,4')"),
    sa.Column('status', sa.String(length=20), nullable=False, comment='PENDING, APPROVED, REJECTED'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_image_selections', 'user_annotation_selections', ['image_id', 'status'], unique=False)
    op.create_index('idx_pending_selections', 'user_annotation_selections', ['status', 'created_at'], unique=False)
    op.create_index('idx_selection_lookup', 'user_annotation_selections', ['image_id', 'selected_annotation_ids_key', 'category_id'], unique=False)
    op.create_index('idx_user_selections', 'user_annotation_selections', ['user_id', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_selections', table_name='user_annotation_selections')
    op.drop_index('idx_selection_lookup', table_name='user_annotation_selections')
    op.drop_index('idx_pending_selections', table_name='user_annotation_selections')
    op.drop_index('idx_image_selections', table_name='user_annotation_selections')
    op.drop_table('user_annotation_selections')
    op.drop_index(op.f('ix_annotations_image_id'), table_name='annotations')
    op.drop_index(op.f('ix_annotations_created_by'), table_name='annotations')
    op.drop_table('annotations')
    op.drop_index(op.f('ix_images_dataset_id'), table_name='images')
    op.drop_table('images')
    op.drop_table('dictionary_categories')
    op.drop_table('datasets')
    op.drop_index(op.f('ix_users_sui_address'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('dictionaries')
    op.drop_table('categories')
    # ### end Alembic commands ### 