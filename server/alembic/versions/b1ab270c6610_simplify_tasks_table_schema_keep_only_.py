"""Simplify tasks table schema - keep only id, name, created_at

Revision ID: b1ab270c6610
Revises: 9cc4bcc5e819
Create Date: 2025-08-24 19:06:24.913452

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b1ab270c6610'
down_revision: Union[str, None] = '9cc4bcc5e819'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, drop the foreign key constraint from images table
    op.drop_constraint('images_task_id_fkey', 'images', type_='foreignkey')
    
    # Clear existing task_id values since data is already deleted
    op.execute("UPDATE images SET task_id = NULL")
    
    # Change the task_id column type in images table to match the new tasks.id type
    op.alter_column('images', 'task_id',
               existing_type=sa.VARCHAR(),
               type_=sa.BigInteger(),
               nullable=True,
               postgresql_using='task_id::bigint')
    
    # Drop the existing tasks table
    op.drop_table('tasks')
    
    # Create new tasks table with simplified schema
    op.create_table('tasks',
        sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Recreate the foreign key constraint with the new id type
    op.create_foreign_key(
        'images_task_id_fkey', 
        'images', 
        'tasks', 
        ['task_id'], 
        ['id'], 
        ondelete='SET NULL'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the foreign key constraint
    op.drop_constraint('images_task_id_fkey', 'images', type_='foreignkey')
    
    # Drop the new tasks table and recreate the old one
    op.drop_table('tasks')
    
    # Recreate the old tasks table with original schema
    op.create_table('tasks',
        sa.Column('id', sa.VARCHAR(), nullable=False),
        sa.Column('title', sa.VARCHAR(), nullable=False),
        sa.Column('description', sa.TEXT(), nullable=False),
        sa.Column('space', sa.VARCHAR(), nullable=False),
        sa.Column('icon', sa.VARCHAR(), nullable=True),
        sa.Column('target_objects', sa.TEXT(), nullable=True),
        sa.Column('required_count', sa.BIGINT(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Change the task_id column type in images table back to VARCHAR
    op.alter_column('images', 'task_id',
               existing_type=sa.BigInteger(),
               type_=sa.VARCHAR(),
               nullable=True)
    
    # Recreate the foreign key constraint with the old id type
    op.create_foreign_key(
        'images_task_id_fkey', 
        'images', 
        'tasks', 
        ['task_id'], 
        ['id'], 
        ondelete='SET NULL'
    )
    # ### end Alembic commands ### 