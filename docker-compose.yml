version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: opengraph-postgres
    secrets:
      - db_password
      - db_user
      - db_name
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-secrets.sh:/docker-entrypoint-initdb.d/init-secrets.sh
    networks:
      - opengraph-backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # Rust Backend Server
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: opengraph-server
    ports:
      - "8080:8080"
    secrets:
      - db_password
      - db_user
      - db_name
    environment:
      PORT: 8080
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opengraph-backend-network
      - opengraph-frontend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # Python ML Converter Service
  converter:
    build:
      context: .
      dockerfile: docker/converter/Dockerfile
    container_name: opengraph-converter
    ports:
      - "3000:3000"
    volumes:
      - ./converter/uploads:/app/uploads
    env_file:
      - converter/.env
    networks:
      - opengraph-frontend-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  # React Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    container_name: opengraph-client
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt/live/explorer.opengraphlabs.xyz:/etc/letsencrypt/live/explorer.opengraphlabs.xyz
      - /etc/letsencrypt/archive/explorer.opengraphlabs.xyz:/etc/letsencrypt/archive/explorer.opengraphlabs.xyz
    depends_on:
      - server
      - converter
    env_file:
      - ./client/.env
    networks:
      - opengraph-frontend-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

# Docker Secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_user:
    file: ./secrets/db_user.txt
  db_name:
    file: ./secrets/db_name.txt

# Network configuration for better security
networks:
  opengraph-backend-network:
    driver: bridge
  opengraph-frontend-network:
    driver: bridge

# Persistent volumes
volumes:
  postgres_data:
  uploads: 