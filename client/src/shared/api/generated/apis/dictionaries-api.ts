/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DictionaryCreate } from '../models';
// @ts-ignore
import type { DictionaryRead } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * DictionariesApi - axios parameter creator
 * @export
 */
export const DictionariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new dictionary
         * @summary Create Dictionary
         * @param {DictionaryCreate} dictionaryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDictionaryApiV1DictionariesPost: async (dictionaryCreate: DictionaryCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryCreate' is not null or undefined
            assertParamExists('createDictionaryApiV1DictionariesPost', 'dictionaryCreate', dictionaryCreate)
            const localVarPath = `/api/v1/dictionaries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dictionaryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dictionary by ID
         * @summary Get Dictionary
         * @param {number} dictionaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryApiV1DictionariesDictionaryIdGet: async (dictionaryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryId' is not null or undefined
            assertParamExists('getDictionaryApiV1DictionariesDictionaryIdGet', 'dictionaryId', dictionaryId)
            const localVarPath = `/api/v1/dictionaries/{dictionary_id}`
                .replace(`{${"dictionary_id"}}`, encodeURIComponent(String(dictionaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DictionariesApi - functional programming interface
 * @export
 */
export const DictionariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DictionariesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new dictionary
         * @summary Create Dictionary
         * @param {DictionaryCreate} dictionaryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDictionaryApiV1DictionariesPost(dictionaryCreate: DictionaryCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DictionaryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDictionaryApiV1DictionariesPost(dictionaryCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DictionariesApi.createDictionaryApiV1DictionariesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a dictionary by ID
         * @summary Get Dictionary
         * @param {number} dictionaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDictionaryApiV1DictionariesDictionaryIdGet(dictionaryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DictionaryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDictionaryApiV1DictionariesDictionaryIdGet(dictionaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DictionariesApi.getDictionaryApiV1DictionariesDictionaryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DictionariesApi - factory interface
 * @export
 */
export const DictionariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DictionariesApiFp(configuration)
    return {
        /**
         * Create a new dictionary
         * @summary Create Dictionary
         * @param {DictionariesApiCreateDictionaryApiV1DictionariesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDictionaryApiV1DictionariesPost(requestParameters: DictionariesApiCreateDictionaryApiV1DictionariesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryRead> {
            return localVarFp.createDictionaryApiV1DictionariesPost(requestParameters.dictionaryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a dictionary by ID
         * @summary Get Dictionary
         * @param {DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryApiV1DictionariesDictionaryIdGet(requestParameters: DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryRead> {
            return localVarFp.getDictionaryApiV1DictionariesDictionaryIdGet(requestParameters.dictionaryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DictionariesApi - interface
 * @export
 * @interface DictionariesApi
 */
export interface DictionariesApiInterface {
    /**
     * Create a new dictionary
     * @summary Create Dictionary
     * @param {DictionariesApiCreateDictionaryApiV1DictionariesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApiInterface
     */
    createDictionaryApiV1DictionariesPost(requestParameters: DictionariesApiCreateDictionaryApiV1DictionariesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryRead>;

    /**
     * Get a dictionary by ID
     * @summary Get Dictionary
     * @param {DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApiInterface
     */
    getDictionaryApiV1DictionariesDictionaryIdGet(requestParameters: DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryRead>;

}

/**
 * Request parameters for createDictionaryApiV1DictionariesPost operation in DictionariesApi.
 * @export
 * @interface DictionariesApiCreateDictionaryApiV1DictionariesPostRequest
 */
export interface DictionariesApiCreateDictionaryApiV1DictionariesPostRequest {
    /**
     * 
     * @type {DictionaryCreate}
     * @memberof DictionariesApiCreateDictionaryApiV1DictionariesPost
     */
    readonly dictionaryCreate: DictionaryCreate
}

/**
 * Request parameters for getDictionaryApiV1DictionariesDictionaryIdGet operation in DictionariesApi.
 * @export
 * @interface DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest
 */
export interface DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGet
     */
    readonly dictionaryId: number
}

/**
 * DictionariesApi - object-oriented interface
 * @export
 * @class DictionariesApi
 * @extends {BaseAPI}
 */
export class DictionariesApi extends BaseAPI implements DictionariesApiInterface {
    /**
     * Create a new dictionary
     * @summary Create Dictionary
     * @param {DictionariesApiCreateDictionaryApiV1DictionariesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    public createDictionaryApiV1DictionariesPost(requestParameters: DictionariesApiCreateDictionaryApiV1DictionariesPostRequest, options?: RawAxiosRequestConfig) {
        return DictionariesApiFp(this.configuration).createDictionaryApiV1DictionariesPost(requestParameters.dictionaryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a dictionary by ID
     * @summary Get Dictionary
     * @param {DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    public getDictionaryApiV1DictionariesDictionaryIdGet(requestParameters: DictionariesApiGetDictionaryApiV1DictionariesDictionaryIdGetRequest, options?: RawAxiosRequestConfig) {
        return DictionariesApiFp(this.configuration).getDictionaryApiV1DictionariesDictionaryIdGet(requestParameters.dictionaryId, options).then((request) => request(this.axios, this.basePath));
    }
}

