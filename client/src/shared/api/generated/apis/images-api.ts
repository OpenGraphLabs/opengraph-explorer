/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { HTTPValidationError } from "../models";
// @ts-ignore
import type { ImageCreate } from "../models";
// @ts-ignore
import type { ImageListResponse } from "../models";
// @ts-ignore
import type { ImageRead } from "../models";
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Add a new image to specific dataset.
     * @summary Add Image
     * @param {ImageCreate} imageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addImageApiV1ImagesPost: async (
      imageCreate: ImageCreate,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'imageCreate' is not null or undefined
      assertParamExists("addImageApiV1ImagesPost", "imageCreate", imageCreate);
      const localVarPath = `/api/v1/images/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        imageCreate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get specific image by ID.
     * @summary Get Image
     * @param {number} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageApiV1ImagesImageIdGet: async (
      imageId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'imageId' is not null or undefined
      assertParamExists("getImageApiV1ImagesImageIdGet", "imageId", imageId);
      const localVarPath = `/api/v1/images/{image_id}`.replace(
        `{${"image_id"}}`,
        encodeURIComponent(String(imageId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all images.
     * @summary Get Images
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImagesApiV1ImagesGet: async (
      page?: number,
      limit?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/images/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration);
  return {
    /**
     * Add a new image to specific dataset.
     * @summary Add Image
     * @param {ImageCreate} imageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addImageApiV1ImagesPost(
      imageCreate: ImageCreate,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addImageApiV1ImagesPost(
        imageCreate,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ImagesApi.addImageApiV1ImagesPost"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get specific image by ID.
     * @summary Get Image
     * @param {number} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getImageApiV1ImagesImageIdGet(
      imageId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getImageApiV1ImagesImageIdGet(
        imageId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ImagesApi.getImageApiV1ImagesImageIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all images.
     * @summary Get Images
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getImagesApiV1ImagesGet(
      page?: number,
      limit?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getImagesApiV1ImagesGet(
        page,
        limit,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ImagesApi.getImagesApiV1ImagesGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ImagesApiFp(configuration);
  return {
    /**
     * Add a new image to specific dataset.
     * @summary Add Image
     * @param {ImagesApiAddImageApiV1ImagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addImageApiV1ImagesPost(
      requestParameters: ImagesApiAddImageApiV1ImagesPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ImageRead> {
      return localVarFp
        .addImageApiV1ImagesPost(requestParameters.imageCreate, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get specific image by ID.
     * @summary Get Image
     * @param {ImagesApiGetImageApiV1ImagesImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageApiV1ImagesImageIdGet(
      requestParameters: ImagesApiGetImageApiV1ImagesImageIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ImageRead> {
      return localVarFp
        .getImageApiV1ImagesImageIdGet(requestParameters.imageId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * List all images.
     * @summary Get Images
     * @param {ImagesApiGetImagesApiV1ImagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImagesApiV1ImagesGet(
      requestParameters: ImagesApiGetImagesApiV1ImagesGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ImageListResponse> {
      return localVarFp
        .getImagesApiV1ImagesGet(requestParameters.page, requestParameters.limit, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * ImagesApi - interface
 * @export
 * @interface ImagesApi
 */
export interface ImagesApiInterface {
  /**
   * Add a new image to specific dataset.
   * @summary Add Image
   * @param {ImagesApiAddImageApiV1ImagesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApiInterface
   */
  addImageApiV1ImagesPost(
    requestParameters: ImagesApiAddImageApiV1ImagesPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ImageRead>;

  /**
   * Get specific image by ID.
   * @summary Get Image
   * @param {ImagesApiGetImageApiV1ImagesImageIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApiInterface
   */
  getImageApiV1ImagesImageIdGet(
    requestParameters: ImagesApiGetImageApiV1ImagesImageIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ImageRead>;

  /**
   * List all images.
   * @summary Get Images
   * @param {ImagesApiGetImagesApiV1ImagesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApiInterface
   */
  getImagesApiV1ImagesGet(
    requestParameters?: ImagesApiGetImagesApiV1ImagesGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ImageListResponse>;
}

/**
 * Request parameters for addImageApiV1ImagesPost operation in ImagesApi.
 * @export
 * @interface ImagesApiAddImageApiV1ImagesPostRequest
 */
export interface ImagesApiAddImageApiV1ImagesPostRequest {
  /**
   *
   * @type {ImageCreate}
   * @memberof ImagesApiAddImageApiV1ImagesPost
   */
  readonly imageCreate: ImageCreate;
}

/**
 * Request parameters for getImageApiV1ImagesImageIdGet operation in ImagesApi.
 * @export
 * @interface ImagesApiGetImageApiV1ImagesImageIdGetRequest
 */
export interface ImagesApiGetImageApiV1ImagesImageIdGetRequest {
  /**
   *
   * @type {number}
   * @memberof ImagesApiGetImageApiV1ImagesImageIdGet
   */
  readonly imageId: number;
}

/**
 * Request parameters for getImagesApiV1ImagesGet operation in ImagesApi.
 * @export
 * @interface ImagesApiGetImagesApiV1ImagesGetRequest
 */
export interface ImagesApiGetImagesApiV1ImagesGetRequest {
  /**
   *
   * @type {number}
   * @memberof ImagesApiGetImagesApiV1ImagesGet
   */
  readonly page?: number;

  /**
   *
   * @type {number}
   * @memberof ImagesApiGetImagesApiV1ImagesGet
   */
  readonly limit?: number;
}

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI implements ImagesApiInterface {
  /**
   * Add a new image to specific dataset.
   * @summary Add Image
   * @param {ImagesApiAddImageApiV1ImagesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public addImageApiV1ImagesPost(
    requestParameters: ImagesApiAddImageApiV1ImagesPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ImagesApiFp(this.configuration)
      .addImageApiV1ImagesPost(requestParameters.imageCreate, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get specific image by ID.
   * @summary Get Image
   * @param {ImagesApiGetImageApiV1ImagesImageIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getImageApiV1ImagesImageIdGet(
    requestParameters: ImagesApiGetImageApiV1ImagesImageIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ImagesApiFp(this.configuration)
      .getImageApiV1ImagesImageIdGet(requestParameters.imageId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * List all images.
   * @summary Get Images
   * @param {ImagesApiGetImagesApiV1ImagesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getImagesApiV1ImagesGet(
    requestParameters: ImagesApiGetImagesApiV1ImagesGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return ImagesApiFp(this.configuration)
      .getImagesApiV1ImagesGet(requestParameters.page, requestParameters.limit, options)
      .then(request => request(this.axios, this.basePath));
  }
}
