/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { HTTPValidationError } from "../models";
// @ts-ignore
import type { UserCreate } from "../models";
// @ts-ignore
import type { UserProfile } from "../models";
// @ts-ignore
import type { UserRead } from "../models";
// @ts-ignore
import type { UserUpdate } from "../models";
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create a new user.
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiV1UsersPost: async (
      userCreate: UserCreate,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreate' is not null or undefined
      assertParamExists("createUserApiV1UsersPost", "userCreate", userCreate);
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete the current user.
     * @summary Delete Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCurrentUserApiV1UsersMeDelete: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Delete User
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserApiV1UsersUserIdDelete: async (
      userId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUserApiV1UsersUserIdDelete", "userId", userId);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get the current user\'s information.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserInfoApiV1UsersMeGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get the current user\'s profile information.
     * @summary Get Current User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserProfileApiV1UsersMeProfileGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a specific user by ID.
     * @summary Get User
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserApiV1UsersUserIdGet: async (
      userId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserApiV1UsersUserIdGet", "userId", userId);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a specific user\'s profile by ID.
     * @summary Get User Profile
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileApiV1UsersUserIdProfileGet: async (
      userId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserProfileApiV1UsersUserIdProfileGet", "userId", userId);
      const localVarPath = `/api/v1/users/{user_id}/profile`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all users with optional pagination and email filter.
     * @summary Get Users
     * @param {number} [skip] 건너뛸 개수
     * @param {number} [limit] 제한 개수
     * @param {string | null} [emailFilter] 이메일 필터
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersApiV1UsersGet: async (
      skip?: number,
      limit?: number,
      emailFilter?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (emailFilter !== undefined) {
        localVarQueryParameter["email_filter"] = emailFilter;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Search for a user by email address.
     * @summary Search User By Email
     * @param {string} email 이메일 주소
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUserByEmailApiV1UsersSearchByEmailGet: async (
      email: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists("searchUserByEmailApiV1UsersSearchByEmailGet", "email", email);
      const localVarPath = `/api/v1/users/search/by-email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Search for a user by Sui wallet address.
     * @summary Search User By Sui Address
     * @param {string} suiAddress Sui 지갑 주소
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet: async (
      suiAddress: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'suiAddress' is not null or undefined
      assertParamExists(
        "searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet",
        "suiAddress",
        suiAddress
      );
      const localVarPath = `/api/v1/users/search/by-sui-address`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (suiAddress !== undefined) {
        localVarQueryParameter["sui_address"] = suiAddress;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the current user\'s information.
     * @summary Update Current User
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserApiV1UsersMePut: async (
      userUpdate: UserUpdate,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userUpdate' is not null or undefined
      assertParamExists("updateCurrentUserApiV1UsersMePut", "userUpdate", userUpdate);
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Update User
     * @param {number} userId
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersUserIdPut: async (
      userId: number,
      userUpdate: UserUpdate,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("updateUserApiV1UsersUserIdPut", "userId", userId);
      // verify required parameter 'userUpdate' is not null or undefined
      assertParamExists("updateUserApiV1UsersUserIdPut", "userUpdate", userUpdate);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdate,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new user.
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserApiV1UsersPost(
      userCreate: UserCreate,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1UsersPost(
        userCreate,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.createUserApiV1UsersPost"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete the current user.
     * @summary Delete Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCurrentUserApiV1UsersMeDelete(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteCurrentUserApiV1UsersMeDelete(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.deleteCurrentUserApiV1UsersMeDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Delete User
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserApiV1UsersUserIdDelete(
      userId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserApiV1UsersUserIdDelete(
        userId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.deleteUserApiV1UsersUserIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get the current user\'s information.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserInfoApiV1UsersMeGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserInfoApiV1UsersMeGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getCurrentUserInfoApiV1UsersMeGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get the current user\'s profile information.
     * @summary Get Current User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserProfileApiV1UsersMeProfileGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserProfileApiV1UsersMeProfileGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getCurrentUserProfileApiV1UsersMeProfileGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a specific user by ID.
     * @summary Get User
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserApiV1UsersUserIdGet(
      userId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserApiV1UsersUserIdGet(
        userId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUserApiV1UsersUserIdGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a specific user\'s profile by ID.
     * @summary Get User Profile
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserProfileApiV1UsersUserIdProfileGet(
      userId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserProfileApiV1UsersUserIdProfileGet(userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUserProfileApiV1UsersUserIdProfileGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all users with optional pagination and email filter.
     * @summary Get Users
     * @param {number} [skip] 건너뛸 개수
     * @param {number} [limit] 제한 개수
     * @param {string | null} [emailFilter] 이메일 필터
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsersApiV1UsersGet(
      skip?: number,
      limit?: number,
      emailFilter?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRead>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersApiV1UsersGet(
        skip,
        limit,
        emailFilter,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUsersApiV1UsersGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Search for a user by email address.
     * @summary Search User By Email
     * @param {string} email 이메일 주소
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchUserByEmailApiV1UsersSearchByEmailGet(
      email: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchUserByEmailApiV1UsersSearchByEmailGet(email, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.searchUserByEmailApiV1UsersSearchByEmailGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Search for a user by Sui wallet address.
     * @summary Search User By Sui Address
     * @param {string} suiAddress Sui 지갑 주소
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
      suiAddress: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
          suiAddress,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update the current user\'s information.
     * @summary Update Current User
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCurrentUserApiV1UsersMePut(
      userUpdate: UserUpdate,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentUserApiV1UsersMePut(
        userUpdate,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateCurrentUserApiV1UsersMePut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Update User
     * @param {number} userId
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserApiV1UsersUserIdPut(
      userId: number,
      userUpdate: UserUpdate,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UsersUserIdPut(
        userId,
        userUpdate,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateUserApiV1UsersUserIdPut"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * Create a new user.
     * @summary Create User
     * @param {UsersApiCreateUserApiV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiV1UsersPost(
      requestParameters: UsersApiCreateUserApiV1UsersPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .createUserApiV1UsersPost(requestParameters.userCreate, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Delete the current user.
     * @summary Delete Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCurrentUserApiV1UsersMeDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .deleteCurrentUserApiV1UsersMeDelete(options)
        .then(request => request(axios, basePath));
    },
    /**
     * Delete a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Delete User
     * @param {UsersApiDeleteUserApiV1UsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserApiV1UsersUserIdDelete(
      requestParameters: UsersApiDeleteUserApiV1UsersUserIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteUserApiV1UsersUserIdDelete(requestParameters.userId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get the current user\'s information.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserInfoApiV1UsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
      return localVarFp
        .getCurrentUserInfoApiV1UsersMeGet(options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get the current user\'s profile information.
     * @summary Get Current User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserProfileApiV1UsersMeProfileGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserProfile> {
      return localVarFp
        .getCurrentUserProfileApiV1UsersMeProfileGet(options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get a specific user by ID.
     * @summary Get User
     * @param {UsersApiGetUserApiV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserApiV1UsersUserIdGet(
      requestParameters: UsersApiGetUserApiV1UsersUserIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .getUserApiV1UsersUserIdGet(requestParameters.userId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Get a specific user\'s profile by ID.
     * @summary Get User Profile
     * @param {UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfileApiV1UsersUserIdProfileGet(
      requestParameters: UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserProfile> {
      return localVarFp
        .getUserProfileApiV1UsersUserIdProfileGet(requestParameters.userId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * List all users with optional pagination and email filter.
     * @summary Get Users
     * @param {UsersApiGetUsersApiV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersApiV1UsersGet(
      requestParameters: UsersApiGetUsersApiV1UsersGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<UserRead>> {
      return localVarFp
        .getUsersApiV1UsersGet(
          requestParameters.skip,
          requestParameters.limit,
          requestParameters.emailFilter,
          options
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Search for a user by email address.
     * @summary Search User By Email
     * @param {UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUserByEmailApiV1UsersSearchByEmailGet(
      requestParameters: UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .searchUserByEmailApiV1UsersSearchByEmailGet(requestParameters.email, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Search for a user by Sui wallet address.
     * @summary Search User By Sui Address
     * @param {UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
      requestParameters: UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
          requestParameters.suiAddress,
          options
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Update the current user\'s information.
     * @summary Update Current User
     * @param {UsersApiUpdateCurrentUserApiV1UsersMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserApiV1UsersMePut(
      requestParameters: UsersApiUpdateCurrentUserApiV1UsersMePutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .updateCurrentUserApiV1UsersMePut(requestParameters.userUpdate, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Update a specific user by ID. Note: This endpoint requires admin privileges.
     * @summary Update User
     * @param {UsersApiUpdateUserApiV1UsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersUserIdPut(
      requestParameters: UsersApiUpdateUserApiV1UsersUserIdPutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserRead> {
      return localVarFp
        .updateUserApiV1UsersUserIdPut(
          requestParameters.userId,
          requestParameters.userUpdate,
          options
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
  /**
   * Create a new user.
   * @summary Create User
   * @param {UsersApiCreateUserApiV1UsersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  createUserApiV1UsersPost(
    requestParameters: UsersApiCreateUserApiV1UsersPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;

  /**
   * Delete the current user.
   * @summary Delete Current User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  deleteCurrentUserApiV1UsersMeDelete(options?: RawAxiosRequestConfig): AxiosPromise<void>;

  /**
   * Delete a specific user by ID. Note: This endpoint requires admin privileges.
   * @summary Delete User
   * @param {UsersApiDeleteUserApiV1UsersUserIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  deleteUserApiV1UsersUserIdDelete(
    requestParameters: UsersApiDeleteUserApiV1UsersUserIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   * Get the current user\'s information.
   * @summary Get Current User Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getCurrentUserInfoApiV1UsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserRead>;

  /**
   * Get the current user\'s profile information.
   * @summary Get Current User Profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getCurrentUserProfileApiV1UsersMeProfileGet(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserProfile>;

  /**
   * Get a specific user by ID.
   * @summary Get User
   * @param {UsersApiGetUserApiV1UsersUserIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getUserApiV1UsersUserIdGet(
    requestParameters: UsersApiGetUserApiV1UsersUserIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;

  /**
   * Get a specific user\'s profile by ID.
   * @summary Get User Profile
   * @param {UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getUserProfileApiV1UsersUserIdProfileGet(
    requestParameters: UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserProfile>;

  /**
   * List all users with optional pagination and email filter.
   * @summary Get Users
   * @param {UsersApiGetUsersApiV1UsersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getUsersApiV1UsersGet(
    requestParameters?: UsersApiGetUsersApiV1UsersGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<UserRead>>;

  /**
   * Search for a user by email address.
   * @summary Search User By Email
   * @param {UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  searchUserByEmailApiV1UsersSearchByEmailGet(
    requestParameters: UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;

  /**
   * Search for a user by Sui wallet address.
   * @summary Search User By Sui Address
   * @param {UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
    requestParameters: UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;

  /**
   * Update the current user\'s information.
   * @summary Update Current User
   * @param {UsersApiUpdateCurrentUserApiV1UsersMePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  updateCurrentUserApiV1UsersMePut(
    requestParameters: UsersApiUpdateCurrentUserApiV1UsersMePutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;

  /**
   * Update a specific user by ID. Note: This endpoint requires admin privileges.
   * @summary Update User
   * @param {UsersApiUpdateUserApiV1UsersUserIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  updateUserApiV1UsersUserIdPut(
    requestParameters: UsersApiUpdateUserApiV1UsersUserIdPutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UserRead>;
}

/**
 * Request parameters for createUserApiV1UsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserApiV1UsersPostRequest
 */
export interface UsersApiCreateUserApiV1UsersPostRequest {
  /**
   *
   * @type {UserCreate}
   * @memberof UsersApiCreateUserApiV1UsersPost
   */
  readonly userCreate: UserCreate;
}

/**
 * Request parameters for deleteUserApiV1UsersUserIdDelete operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserApiV1UsersUserIdDeleteRequest
 */
export interface UsersApiDeleteUserApiV1UsersUserIdDeleteRequest {
  /**
   *
   * @type {number}
   * @memberof UsersApiDeleteUserApiV1UsersUserIdDelete
   */
  readonly userId: number;
}

/**
 * Request parameters for getUserApiV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserApiV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserApiV1UsersUserIdGetRequest {
  /**
   *
   * @type {number}
   * @memberof UsersApiGetUserApiV1UsersUserIdGet
   */
  readonly userId: number;
}

/**
 * Request parameters for getUserProfileApiV1UsersUserIdProfileGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest
 */
export interface UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest {
  /**
   *
   * @type {number}
   * @memberof UsersApiGetUserProfileApiV1UsersUserIdProfileGet
   */
  readonly userId: number;
}

/**
 * Request parameters for getUsersApiV1UsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersApiV1UsersGetRequest
 */
export interface UsersApiGetUsersApiV1UsersGetRequest {
  /**
   * 건너뛸 개수
   * @type {number}
   * @memberof UsersApiGetUsersApiV1UsersGet
   */
  readonly skip?: number;

  /**
   * 제한 개수
   * @type {number}
   * @memberof UsersApiGetUsersApiV1UsersGet
   */
  readonly limit?: number;

  /**
   * 이메일 필터
   * @type {string}
   * @memberof UsersApiGetUsersApiV1UsersGet
   */
  readonly emailFilter?: string | null;
}

/**
 * Request parameters for searchUserByEmailApiV1UsersSearchByEmailGet operation in UsersApi.
 * @export
 * @interface UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest
 */
export interface UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest {
  /**
   * 이메일 주소
   * @type {string}
   * @memberof UsersApiSearchUserByEmailApiV1UsersSearchByEmailGet
   */
  readonly email: string;
}

/**
 * Request parameters for searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet operation in UsersApi.
 * @export
 * @interface UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest
 */
export interface UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest {
  /**
   * Sui 지갑 주소
   * @type {string}
   * @memberof UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGet
   */
  readonly suiAddress: string;
}

/**
 * Request parameters for updateCurrentUserApiV1UsersMePut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateCurrentUserApiV1UsersMePutRequest
 */
export interface UsersApiUpdateCurrentUserApiV1UsersMePutRequest {
  /**
   *
   * @type {UserUpdate}
   * @memberof UsersApiUpdateCurrentUserApiV1UsersMePut
   */
  readonly userUpdate: UserUpdate;
}

/**
 * Request parameters for updateUserApiV1UsersUserIdPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserApiV1UsersUserIdPutRequest
 */
export interface UsersApiUpdateUserApiV1UsersUserIdPutRequest {
  /**
   *
   * @type {number}
   * @memberof UsersApiUpdateUserApiV1UsersUserIdPut
   */
  readonly userId: number;

  /**
   *
   * @type {UserUpdate}
   * @memberof UsersApiUpdateUserApiV1UsersUserIdPut
   */
  readonly userUpdate: UserUpdate;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
  /**
   * Create a new user.
   * @summary Create User
   * @param {UsersApiCreateUserApiV1UsersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createUserApiV1UsersPost(
    requestParameters: UsersApiCreateUserApiV1UsersPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .createUserApiV1UsersPost(requestParameters.userCreate, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Delete the current user.
   * @summary Delete Current User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteCurrentUserApiV1UsersMeDelete(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .deleteCurrentUserApiV1UsersMeDelete(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Delete a specific user by ID. Note: This endpoint requires admin privileges.
   * @summary Delete User
   * @param {UsersApiDeleteUserApiV1UsersUserIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUserApiV1UsersUserIdDelete(
    requestParameters: UsersApiDeleteUserApiV1UsersUserIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .deleteUserApiV1UsersUserIdDelete(requestParameters.userId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get the current user\'s information.
   * @summary Get Current User Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getCurrentUserInfoApiV1UsersMeGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getCurrentUserInfoApiV1UsersMeGet(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get the current user\'s profile information.
   * @summary Get Current User Profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getCurrentUserProfileApiV1UsersMeProfileGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getCurrentUserProfileApiV1UsersMeProfileGet(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get a specific user by ID.
   * @summary Get User
   * @param {UsersApiGetUserApiV1UsersUserIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUserApiV1UsersUserIdGet(
    requestParameters: UsersApiGetUserApiV1UsersUserIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .getUserApiV1UsersUserIdGet(requestParameters.userId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get a specific user\'s profile by ID.
   * @summary Get User Profile
   * @param {UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUserProfileApiV1UsersUserIdProfileGet(
    requestParameters: UsersApiGetUserProfileApiV1UsersUserIdProfileGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .getUserProfileApiV1UsersUserIdProfileGet(requestParameters.userId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * List all users with optional pagination and email filter.
   * @summary Get Users
   * @param {UsersApiGetUsersApiV1UsersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUsersApiV1UsersGet(
    requestParameters: UsersApiGetUsersApiV1UsersGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .getUsersApiV1UsersGet(
        requestParameters.skip,
        requestParameters.limit,
        requestParameters.emailFilter,
        options
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Search for a user by email address.
   * @summary Search User By Email
   * @param {UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public searchUserByEmailApiV1UsersSearchByEmailGet(
    requestParameters: UsersApiSearchUserByEmailApiV1UsersSearchByEmailGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .searchUserByEmailApiV1UsersSearchByEmailGet(requestParameters.email, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Search for a user by Sui wallet address.
   * @summary Search User By Sui Address
   * @param {UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(
    requestParameters: UsersApiSearchUserBySuiAddressApiV1UsersSearchBySuiAddressGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .searchUserBySuiAddressApiV1UsersSearchBySuiAddressGet(requestParameters.suiAddress, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Update the current user\'s information.
   * @summary Update Current User
   * @param {UsersApiUpdateCurrentUserApiV1UsersMePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateCurrentUserApiV1UsersMePut(
    requestParameters: UsersApiUpdateCurrentUserApiV1UsersMePutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .updateCurrentUserApiV1UsersMePut(requestParameters.userUpdate, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Update a specific user by ID. Note: This endpoint requires admin privileges.
   * @summary Update User
   * @param {UsersApiUpdateUserApiV1UsersUserIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUserApiV1UsersUserIdPut(
    requestParameters: UsersApiUpdateUserApiV1UsersUserIdPutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .updateUserApiV1UsersUserIdPut(
        requestParameters.userId,
        requestParameters.userUpdate,
        options
      )
      .then(request => request(this.axios, this.basePath));
  }
}
