/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnnotationRead } from '../models';
// @ts-ignore
import type { AnnotationUserCreate } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * AnnotationsApi - axios parameter creator
 * @export
 */
export const AnnotationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new annotation
         * @summary Create User Annotation
         * @param {AnnotationUserCreate} annotationUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAnnotationApiV1AnnotationsPost: async (annotationUserCreate: AnnotationUserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationUserCreate' is not null or undefined
            assertParamExists('createUserAnnotationApiV1AnnotationsPost', 'annotationUserCreate', annotationUserCreate)
            const localVarPath = `/api/v1/annotations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationUserCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationApiV1AnnotationsAnnotationIdGet: async (annotationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('getAnnotationApiV1AnnotationsAnnotationIdGet', 'annotationId', annotationId)
            const localVarPath = `/api/v1/annotations/{annotation_id}`
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all annotations for a specific image with client-friendly mask information
         * @summary Get Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsByImageApiV1AnnotationsImageImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getAnnotationsByImageApiV1AnnotationsImageImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/v1/annotations/image/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationsApi - functional programming interface
 * @export
 */
export const AnnotationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new annotation
         * @summary Create User Annotation
         * @param {AnnotationUserCreate} annotationUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserAnnotationApiV1AnnotationsPost(annotationUserCreate: AnnotationUserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAnnotationApiV1AnnotationsPost(annotationUserCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.createUserAnnotationApiV1AnnotationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotationApiV1AnnotationsAnnotationIdGet(annotationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotationApiV1AnnotationsAnnotationIdGet(annotationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getAnnotationApiV1AnnotationsAnnotationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all annotations for a specific image with client-friendly mask information
         * @summary Get Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotationsByImageApiV1AnnotationsImageImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnnotationRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotationsByImageApiV1AnnotationsImageImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getAnnotationsByImageApiV1AnnotationsImageImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnnotationsApi - factory interface
 * @export
 */
export const AnnotationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationsApiFp(configuration)
    return {
        /**
         * Create a new annotation
         * @summary Create User Annotation
         * @param {AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAnnotationApiV1AnnotationsPost(requestParameters: AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead> {
            return localVarFp.createUserAnnotationApiV1AnnotationsPost(requestParameters.annotationUserCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead> {
            return localVarFp.getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters.annotationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all annotations for a specific image with client-friendly mask information
         * @summary Get Annotations By Image
         * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationRead>> {
            return localVarFp.getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationsApi - interface
 * @export
 * @interface AnnotationsApi
 */
export interface AnnotationsApiInterface {
    /**
     * Create a new annotation
     * @summary Create User Annotation
     * @param {AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    createUserAnnotationApiV1AnnotationsPost(requestParameters: AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead>;

    /**
     * Get a annotation by id
     * @summary Get Annotation
     * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead>;

    /**
     * Get all annotations for a specific image with client-friendly mask information
     * @summary Get Annotations By Image
     * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationRead>>;

}

/**
 * Request parameters for createUserAnnotationApiV1AnnotationsPost operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest
 */
export interface AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest {
    /**
     * 
     * @type {AnnotationUserCreate}
     * @memberof AnnotationsApiCreateUserAnnotationApiV1AnnotationsPost
     */
    readonly annotationUserCreate: AnnotationUserCreate
}

/**
 * Request parameters for getAnnotationApiV1AnnotationsAnnotationIdGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest
 */
export interface AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGet
     */
    readonly annotationId: number
}

/**
 * Request parameters for getAnnotationsByImageApiV1AnnotationsImageImageIdGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest
 */
export interface AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGet
     */
    readonly imageId: number
}

/**
 * AnnotationsApi - object-oriented interface
 * @export
 * @class AnnotationsApi
 * @extends {BaseAPI}
 */
export class AnnotationsApi extends BaseAPI implements AnnotationsApiInterface {
    /**
     * Create a new annotation
     * @summary Create User Annotation
     * @param {AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public createUserAnnotationApiV1AnnotationsPost(requestParameters: AnnotationsApiCreateUserAnnotationApiV1AnnotationsPostRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).createUserAnnotationApiV1AnnotationsPost(requestParameters.annotationUserCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a annotation by id
     * @summary Get Annotation
     * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters.annotationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all annotations for a specific image with client-friendly mask information
     * @summary Get Annotations By Image
     * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }
}

