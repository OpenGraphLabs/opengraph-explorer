/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnnotationClientRead } from '../models';
// @ts-ignore
import type { AnnotationListResponse } from '../models';
// @ts-ignore
import type { AnnotationRead } from '../models';
// @ts-ignore
import type { AnnotationSelectionStats } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { UserAnnotationSelectionBatchCreate } from '../models';
// @ts-ignore
import type { UserAnnotationSelectionBatchResponse } from '../models';
// @ts-ignore
import type { UserAnnotationSelectionCreate } from '../models';
// @ts-ignore
import type { UserAnnotationSelectionRead } from '../models';
// @ts-ignore
import type { UserAnnotationSelectionUpdate } from '../models';
/**
 * AnnotationsApi - axios parameter creator
 * @export
 */
export const AnnotationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new annotation selection  Records user selections that combine multiple AUTO annotations to form a meaningful entity. If the same selection is made by five or more users, it is automatically marked as APPROVED.
         * @summary Create Annotation Selection
         * @param {UserAnnotationSelectionCreate} userAnnotationSelectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationSelectionApiV1AnnotationsSelectionsPost: async (userAnnotationSelectionCreate: UserAnnotationSelectionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAnnotationSelectionCreate' is not null or undefined
            assertParamExists('createAnnotationSelectionApiV1AnnotationsSelectionsPost', 'userAnnotationSelectionCreate', userAnnotationSelectionCreate)
            const localVarPath = `/api/v1/annotations/selections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAnnotationSelectionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple annotation selections in batch  Allows creating multiple annotation selections at once for efficiency. Each selection in the batch is processed independently - some may succeed while others fail.  Request body example: {     \"selections\": [         {             \"image_id\": 3,             \"selected_annotation_ids\": [1, 3, 4],             \"category_id\": 5         },         {             \"image_id\": 3,              \"selected_annotation_ids\": [2, 6, 7],             \"category_id\": 7         }     ] }
         * @summary Create Annotation Selections Batch
         * @param {UserAnnotationSelectionBatchCreate} userAnnotationSelectionBatchCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost: async (userAnnotationSelectionBatchCreate: UserAnnotationSelectionBatchCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAnnotationSelectionBatchCreate' is not null or undefined
            assertParamExists('createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost', 'userAnnotationSelectionBatchCreate', userAnnotationSelectionBatchCreate)
            const localVarPath = `/api/v1/annotations/selections/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAnnotationSelectionBatchCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a annotation selection (only available for that annotator)
         * @summary Delete Annotation Selection
         * @param {number} selectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete: async (selectionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selectionId' is not null or undefined
            assertParamExists('deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete', 'selectionId', selectionId)
            const localVarPath = `/api/v1/annotations/selections/{selection_id}`
                .replace(`{${"selection_id"}}`, encodeURIComponent(String(selectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationApiV1AnnotationsAnnotationIdGet: async (annotationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('getAnnotationApiV1AnnotationsAnnotationIdGet', 'annotationId', annotationId)
            const localVarPath = `/api/v1/annotations/{annotation_id}`
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a annotation selection by id
         * @summary Get Annotation Selection
         * @param {number} selectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet: async (selectionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selectionId' is not null or undefined
            assertParamExists('getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet', 'selectionId', selectionId)
            const localVarPath = `/api/v1/annotations/selections/{selection_id}`
                .replace(`{${"selection_id"}}`, encodeURIComponent(String(selectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsByImageApiV1AnnotationsImageImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getAnnotationsByImageApiV1AnnotationsImageImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/v1/annotations/image/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all approved annotations.
         * @summary Get Approved Annotations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedAnnotationsApiV1AnnotationsApprovedGet: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annotations/approved`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Approved Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet', 'imageId', imageId)
            const localVarPath = `/api/v1/annotations/image/{image_id}/approved`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get annotation selection stats for a specific image  Provides information such as the number of users who made the same selection and whether it qualifies for approval.
         * @summary Get Image Selection Stats
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet', 'imageId', imageId)
            const localVarPath = `/api/v1/annotations/selections/image/{image_id}/stats`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List annotation selections for specific user
         * @summary Get My Annotation Selections
         * @param {number | null} [imageId] 특정 이미지의 선택만 조회
         * @param {string | null} [selectionStatus] 특정 상태의 선택만 조회 (PENDING|APPROVED|REJECTED)
         * @param {number} [limit] 조회할 선택 수
         * @param {number} [offset] 건너뛸 선택 수
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet: async (imageId?: number | null, selectionStatus?: string | null, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annotations/selections/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }

            if (selectionStatus !== undefined) {
                localVarQueryParameter['selection_status'] = selectionStatus;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a annotation selection  Mainly used for category update or status change by administrator
         * @summary Update Annotation Selection
         * @param {number} selectionId 
         * @param {UserAnnotationSelectionUpdate} userAnnotationSelectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut: async (selectionId: number, userAnnotationSelectionUpdate: UserAnnotationSelectionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selectionId' is not null or undefined
            assertParamExists('updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut', 'selectionId', selectionId)
            // verify required parameter 'userAnnotationSelectionUpdate' is not null or undefined
            assertParamExists('updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut', 'userAnnotationSelectionUpdate', userAnnotationSelectionUpdate)
            const localVarPath = `/api/v1/annotations/selections/{selection_id}`
                .replace(`{${"selection_id"}}`, encodeURIComponent(String(selectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAnnotationSelectionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationsApi - functional programming interface
 * @export
 */
export const AnnotationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new annotation selection  Records user selections that combine multiple AUTO annotations to form a meaningful entity. If the same selection is made by five or more users, it is automatically marked as APPROVED.
         * @summary Create Annotation Selection
         * @param {UserAnnotationSelectionCreate} userAnnotationSelectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnotationSelectionApiV1AnnotationsSelectionsPost(userAnnotationSelectionCreate: UserAnnotationSelectionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAnnotationSelectionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnotationSelectionApiV1AnnotationsSelectionsPost(userAnnotationSelectionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.createAnnotationSelectionApiV1AnnotationsSelectionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create multiple annotation selections in batch  Allows creating multiple annotation selections at once for efficiency. Each selection in the batch is processed independently - some may succeed while others fail.  Request body example: {     \"selections\": [         {             \"image_id\": 3,             \"selected_annotation_ids\": [1, 3, 4],             \"category_id\": 5         },         {             \"image_id\": 3,              \"selected_annotation_ids\": [2, 6, 7],             \"category_id\": 7         }     ] }
         * @summary Create Annotation Selections Batch
         * @param {UserAnnotationSelectionBatchCreate} userAnnotationSelectionBatchCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(userAnnotationSelectionBatchCreate: UserAnnotationSelectionBatchCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAnnotationSelectionBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(userAnnotationSelectionBatchCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a annotation selection (only available for that annotator)
         * @summary Delete Annotation Selection
         * @param {number} selectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(selectionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(selectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {number} annotationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotationApiV1AnnotationsAnnotationIdGet(annotationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotationApiV1AnnotationsAnnotationIdGet(annotationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getAnnotationApiV1AnnotationsAnnotationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a annotation selection by id
         * @summary Get Annotation Selection
         * @param {number} selectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(selectionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAnnotationSelectionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(selectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotationsByImageApiV1AnnotationsImageImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnnotationClientRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotationsByImageApiV1AnnotationsImageImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getAnnotationsByImageApiV1AnnotationsImageImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all approved annotations.
         * @summary Get Approved Annotations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApprovedAnnotationsApiV1AnnotationsApprovedGet(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApprovedAnnotationsApiV1AnnotationsApprovedGet(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getApprovedAnnotationsApiV1AnnotationsApprovedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Approved Annotations By Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnnotationClientRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get annotation selection stats for a specific image  Provides information such as the number of users who made the same selection and whether it qualifies for approval.
         * @summary Get Image Selection Stats
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnnotationSelectionStats>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List annotation selections for specific user
         * @summary Get My Annotation Selections
         * @param {number | null} [imageId] 특정 이미지의 선택만 조회
         * @param {string | null} [selectionStatus] 특정 상태의 선택만 조회 (PENDING|APPROVED|REJECTED)
         * @param {number} [limit] 조회할 선택 수
         * @param {number} [offset] 건너뛸 선택 수
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(imageId?: number | null, selectionStatus?: string | null, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAnnotationSelectionRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(imageId, selectionStatus, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a annotation selection  Mainly used for category update or status change by administrator
         * @summary Update Annotation Selection
         * @param {number} selectionId 
         * @param {UserAnnotationSelectionUpdate} userAnnotationSelectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(selectionId: number, userAnnotationSelectionUpdate: UserAnnotationSelectionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAnnotationSelectionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(selectionId, userAnnotationSelectionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnotationsApi.updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnnotationsApi - factory interface
 * @export
 */
export const AnnotationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationsApiFp(configuration)
    return {
        /**
         * Create a new annotation selection  Records user selections that combine multiple AUTO annotations to form a meaningful entity. If the same selection is made by five or more users, it is automatically marked as APPROVED.
         * @summary Create Annotation Selection
         * @param {AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationSelectionApiV1AnnotationsSelectionsPost(requestParameters: AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead> {
            return localVarFp.createAnnotationSelectionApiV1AnnotationsSelectionsPost(requestParameters.userAnnotationSelectionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create multiple annotation selections in batch  Allows creating multiple annotation selections at once for efficiency. Each selection in the batch is processed independently - some may succeed while others fail.  Request body example: {     \"selections\": [         {             \"image_id\": 3,             \"selected_annotation_ids\": [1, 3, 4],             \"category_id\": 5         },         {             \"image_id\": 3,              \"selected_annotation_ids\": [2, 6, 7],             \"category_id\": 7         }     ] }
         * @summary Create Annotation Selections Batch
         * @param {AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(requestParameters: AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionBatchResponse> {
            return localVarFp.createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(requestParameters.userAnnotationSelectionBatchCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a annotation selection (only available for that annotator)
         * @summary Delete Annotation Selection
         * @param {AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(requestParameters: AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(requestParameters.selectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a annotation by id
         * @summary Get Annotation
         * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead> {
            return localVarFp.getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters.annotationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a annotation selection by id
         * @summary Get Annotation Selection
         * @param {AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(requestParameters: AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead> {
            return localVarFp.getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(requestParameters.selectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Annotations By Image
         * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationClientRead>> {
            return localVarFp.getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all approved annotations.
         * @summary Get Approved Annotations
         * @param {AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedAnnotationsApiV1AnnotationsApprovedGet(requestParameters: AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationListResponse> {
            return localVarFp.getApprovedAnnotationsApiV1AnnotationsApprovedGet(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
         * @summary Get Approved Annotations By Image
         * @param {AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(requestParameters: AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationClientRead>> {
            return localVarFp.getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get annotation selection stats for a specific image  Provides information such as the number of users who made the same selection and whether it qualifies for approval.
         * @summary Get Image Selection Stats
         * @param {AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(requestParameters: AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationSelectionStats>> {
            return localVarFp.getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * List annotation selections for specific user
         * @summary Get My Annotation Selections
         * @param {AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(requestParameters: AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAnnotationSelectionRead>> {
            return localVarFp.getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(requestParameters.imageId, requestParameters.selectionStatus, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a annotation selection  Mainly used for category update or status change by administrator
         * @summary Update Annotation Selection
         * @param {AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(requestParameters: AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead> {
            return localVarFp.updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(requestParameters.selectionId, requestParameters.userAnnotationSelectionUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationsApi - interface
 * @export
 * @interface AnnotationsApi
 */
export interface AnnotationsApiInterface {
    /**
     * Create a new annotation selection  Records user selections that combine multiple AUTO annotations to form a meaningful entity. If the same selection is made by five or more users, it is automatically marked as APPROVED.
     * @summary Create Annotation Selection
     * @param {AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    createAnnotationSelectionApiV1AnnotationsSelectionsPost(requestParameters: AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead>;

    /**
     * Create multiple annotation selections in batch  Allows creating multiple annotation selections at once for efficiency. Each selection in the batch is processed independently - some may succeed while others fail.  Request body example: {     \"selections\": [         {             \"image_id\": 3,             \"selected_annotation_ids\": [1, 3, 4],             \"category_id\": 5         },         {             \"image_id\": 3,              \"selected_annotation_ids\": [2, 6, 7],             \"category_id\": 7         }     ] }
     * @summary Create Annotation Selections Batch
     * @param {AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(requestParameters: AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionBatchResponse>;

    /**
     * Delete a annotation selection (only available for that annotator)
     * @summary Delete Annotation Selection
     * @param {AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(requestParameters: AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get a annotation by id
     * @summary Get Annotation
     * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationRead>;

    /**
     * Get a annotation selection by id
     * @summary Get Annotation Selection
     * @param {AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(requestParameters: AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead>;

    /**
     * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
     * @summary Get Annotations By Image
     * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationClientRead>>;

    /**
     * List all approved annotations.
     * @summary Get Approved Annotations
     * @param {AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getApprovedAnnotationsApiV1AnnotationsApprovedGet(requestParameters?: AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationListResponse>;

    /**
     * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
     * @summary Get Approved Annotations By Image
     * @param {AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(requestParameters: AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationClientRead>>;

    /**
     * Get annotation selection stats for a specific image  Provides information such as the number of users who made the same selection and whether it qualifies for approval.
     * @summary Get Image Selection Stats
     * @param {AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(requestParameters: AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AnnotationSelectionStats>>;

    /**
     * List annotation selections for specific user
     * @summary Get My Annotation Selections
     * @param {AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(requestParameters?: AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAnnotationSelectionRead>>;

    /**
     * Update a annotation selection  Mainly used for category update or status change by administrator
     * @summary Update Annotation Selection
     * @param {AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApiInterface
     */
    updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(requestParameters: AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAnnotationSelectionRead>;

}

/**
 * Request parameters for createAnnotationSelectionApiV1AnnotationsSelectionsPost operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest
 */
export interface AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest {
    /**
     * 
     * @type {UserAnnotationSelectionCreate}
     * @memberof AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPost
     */
    readonly userAnnotationSelectionCreate: UserAnnotationSelectionCreate
}

/**
 * Request parameters for createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest
 */
export interface AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest {
    /**
     * 
     * @type {UserAnnotationSelectionBatchCreate}
     * @memberof AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost
     */
    readonly userAnnotationSelectionBatchCreate: UserAnnotationSelectionBatchCreate
}

/**
 * Request parameters for deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest
 */
export interface AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete
     */
    readonly selectionId: number
}

/**
 * Request parameters for getAnnotationApiV1AnnotationsAnnotationIdGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest
 */
export interface AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGet
     */
    readonly annotationId: number
}

/**
 * Request parameters for getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest
 */
export interface AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet
     */
    readonly selectionId: number
}

/**
 * Request parameters for getAnnotationsByImageApiV1AnnotationsImageImageIdGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest
 */
export interface AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGet
     */
    readonly imageId: number
}

/**
 * Request parameters for getApprovedAnnotationsApiV1AnnotationsApprovedGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest
 */
export interface AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGet
     */
    readonly limit?: number
}

/**
 * Request parameters for getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest
 */
export interface AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet
     */
    readonly imageId: number
}

/**
 * Request parameters for getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest
 */
export interface AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet
     */
    readonly imageId: number
}

/**
 * Request parameters for getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest
 */
export interface AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest {
    /**
     * 특정 이미지의 선택만 조회
     * @type {number}
     * @memberof AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet
     */
    readonly imageId?: number | null

    /**
     * 특정 상태의 선택만 조회 (PENDING|APPROVED|REJECTED)
     * @type {string}
     * @memberof AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet
     */
    readonly selectionStatus?: string | null

    /**
     * 조회할 선택 수
     * @type {number}
     * @memberof AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet
     */
    readonly limit?: number

    /**
     * 건너뛸 선택 수
     * @type {number}
     * @memberof AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet
     */
    readonly offset?: number
}

/**
 * Request parameters for updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut operation in AnnotationsApi.
 * @export
 * @interface AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest
 */
export interface AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut
     */
    readonly selectionId: number

    /**
     * 
     * @type {UserAnnotationSelectionUpdate}
     * @memberof AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut
     */
    readonly userAnnotationSelectionUpdate: UserAnnotationSelectionUpdate
}

/**
 * AnnotationsApi - object-oriented interface
 * @export
 * @class AnnotationsApi
 * @extends {BaseAPI}
 */
export class AnnotationsApi extends BaseAPI implements AnnotationsApiInterface {
    /**
     * Create a new annotation selection  Records user selections that combine multiple AUTO annotations to form a meaningful entity. If the same selection is made by five or more users, it is automatically marked as APPROVED.
     * @summary Create Annotation Selection
     * @param {AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public createAnnotationSelectionApiV1AnnotationsSelectionsPost(requestParameters: AnnotationsApiCreateAnnotationSelectionApiV1AnnotationsSelectionsPostRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).createAnnotationSelectionApiV1AnnotationsSelectionsPost(requestParameters.userAnnotationSelectionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create multiple annotation selections in batch  Allows creating multiple annotation selections at once for efficiency. Each selection in the batch is processed independently - some may succeed while others fail.  Request body example: {     \"selections\": [         {             \"image_id\": 3,             \"selected_annotation_ids\": [1, 3, 4],             \"category_id\": 5         },         {             \"image_id\": 3,              \"selected_annotation_ids\": [2, 6, 7],             \"category_id\": 7         }     ] }
     * @summary Create Annotation Selections Batch
     * @param {AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(requestParameters: AnnotationsApiCreateAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPostRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).createAnnotationSelectionsBatchApiV1AnnotationsSelectionsBatchPost(requestParameters.userAnnotationSelectionBatchCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a annotation selection (only available for that annotator)
     * @summary Delete Annotation Selection
     * @param {AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(requestParameters: AnnotationsApiDeleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).deleteAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdDelete(requestParameters.selectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a annotation by id
     * @summary Get Annotation
     * @param {AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters: AnnotationsApiGetAnnotationApiV1AnnotationsAnnotationIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getAnnotationApiV1AnnotationsAnnotationIdGet(requestParameters.annotationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a annotation selection by id
     * @summary Get Annotation Selection
     * @param {AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(requestParameters: AnnotationsApiGetAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdGet(requestParameters.selectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
     * @summary Get Annotations By Image
     * @param {AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters: AnnotationsApiGetAnnotationsByImageApiV1AnnotationsImageImageIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getAnnotationsByImageApiV1AnnotationsImageImageIdGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all approved annotations.
     * @summary Get Approved Annotations
     * @param {AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getApprovedAnnotationsApiV1AnnotationsApprovedGet(requestParameters: AnnotationsApiGetApprovedAnnotationsApiV1AnnotationsApprovedGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getApprovedAnnotationsApiV1AnnotationsApprovedGet(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all annotations for a specific image with client-friendly format (polygon data, no RLE)
     * @summary Get Approved Annotations By Image
     * @param {AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(requestParameters: AnnotationsApiGetApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getApprovedAnnotationsByImageApiV1AnnotationsImageImageIdApprovedGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get annotation selection stats for a specific image  Provides information such as the number of users who made the same selection and whether it qualifies for approval.
     * @summary Get Image Selection Stats
     * @param {AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(requestParameters: AnnotationsApiGetImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGetRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getImageSelectionStatsApiV1AnnotationsSelectionsImageImageIdStatsGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List annotation selections for specific user
     * @summary Get My Annotation Selections
     * @param {AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(requestParameters: AnnotationsApiGetMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).getMyAnnotationSelectionsApiV1AnnotationsSelectionsMeGet(requestParameters.imageId, requestParameters.selectionStatus, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a annotation selection  Mainly used for category update or status change by administrator
     * @summary Update Annotation Selection
     * @param {AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationsApi
     */
    public updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(requestParameters: AnnotationsApiUpdateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPutRequest, options?: RawAxiosRequestConfig) {
        return AnnotationsApiFp(this.configuration).updateAnnotationSelectionApiV1AnnotationsSelectionsSelectionIdPut(requestParameters.selectionId, requestParameters.userAnnotationSelectionUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

