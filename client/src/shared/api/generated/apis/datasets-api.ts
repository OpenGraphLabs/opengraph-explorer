/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DatasetCreate } from '../models';
// @ts-ignore
import type { DatasetListResponse } from '../models';
// @ts-ignore
import type { DatasetRead } from '../models';
// @ts-ignore
import type { DatasetUpdate } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ImageListResponse } from '../models';
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new dataset.
         * @summary Create Dataset
         * @param {DatasetCreate} datasetCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetApiV1DatasetsPost: async (datasetCreate: DatasetCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetCreate' is not null or undefined
            assertParamExists('createDatasetApiV1DatasetsPost', 'datasetCreate', datasetCreate)
            const localVarPath = `/api/v1/datasets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 데이터셋을 삭제합니다.
         * @summary Delete Dataset
         * @param {number} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetApiV1DatasetsDatasetIdDelete: async (datasetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteDatasetApiV1DatasetsDatasetIdDelete', 'datasetId', datasetId)
            const localVarPath = `/api/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dataset by id.
         * @summary Get Dataset
         * @param {number} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetApiV1DatasetsDatasetIdGet: async (datasetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetApiV1DatasetsDatasetIdGet', 'datasetId', datasetId)
            const localVarPath = `/api/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all images in a dataset.
         * @summary Get Dataset Images
         * @param {number} datasetId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetImagesApiV1DatasetsDatasetIdImagesGet: async (datasetId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetImagesApiV1DatasetsDatasetIdImagesGet', 'datasetId', datasetId)
            const localVarPath = `/api/v1/datasets/{dataset_id}/images`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all datasets.
         * @summary Get Datasets
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsApiV1DatasetsGet: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/datasets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 데이터셋을 업데이트합니다.
         * @summary Update Dataset
         * @param {number} datasetId 
         * @param {DatasetUpdate} datasetUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetApiV1DatasetsDatasetIdPut: async (datasetId: number, datasetUpdate: DatasetUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('updateDatasetApiV1DatasetsDatasetIdPut', 'datasetId', datasetId)
            // verify required parameter 'datasetUpdate' is not null or undefined
            assertParamExists('updateDatasetApiV1DatasetsDatasetIdPut', 'datasetUpdate', datasetUpdate)
            const localVarPath = `/api/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new dataset.
         * @summary Create Dataset
         * @param {DatasetCreate} datasetCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatasetApiV1DatasetsPost(datasetCreate: DatasetCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatasetApiV1DatasetsPost(datasetCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.createDatasetApiV1DatasetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 데이터셋을 삭제합니다.
         * @summary Delete Dataset
         * @param {number} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatasetApiV1DatasetsDatasetIdDelete(datasetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatasetApiV1DatasetsDatasetIdDelete(datasetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.deleteDatasetApiV1DatasetsDatasetIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a dataset by id.
         * @summary Get Dataset
         * @param {number} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetApiV1DatasetsDatasetIdGet(datasetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetApiV1DatasetsDatasetIdGet(datasetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.getDatasetApiV1DatasetsDatasetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all images in a dataset.
         * @summary Get Dataset Images
         * @param {number} datasetId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetImagesApiV1DatasetsDatasetIdImagesGet(datasetId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetImagesApiV1DatasetsDatasetIdImagesGet(datasetId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.getDatasetImagesApiV1DatasetsDatasetIdImagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all datasets.
         * @summary Get Datasets
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetsApiV1DatasetsGet(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetsApiV1DatasetsGet(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.getDatasetsApiV1DatasetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 데이터셋을 업데이트합니다.
         * @summary Update Dataset
         * @param {number} datasetId 
         * @param {DatasetUpdate} datasetUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatasetApiV1DatasetsDatasetIdPut(datasetId: number, datasetUpdate: DatasetUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDatasetApiV1DatasetsDatasetIdPut(datasetId, datasetUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatasetsApi.updateDatasetApiV1DatasetsDatasetIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetsApiFp(configuration)
    return {
        /**
         * Create a new dataset.
         * @summary Create Dataset
         * @param {DatasetsApiCreateDatasetApiV1DatasetsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetApiV1DatasetsPost(requestParameters: DatasetsApiCreateDatasetApiV1DatasetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead> {
            return localVarFp.createDatasetApiV1DatasetsPost(requestParameters.datasetCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 데이터셋을 삭제합니다.
         * @summary Delete Dataset
         * @param {DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetApiV1DatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDatasetApiV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a dataset by id.
         * @summary Get Dataset
         * @param {DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetApiV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead> {
            return localVarFp.getDatasetApiV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all images in a dataset.
         * @summary Get Dataset Images
         * @param {DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetImagesApiV1DatasetsDatasetIdImagesGet(requestParameters: DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageListResponse> {
            return localVarFp.getDatasetImagesApiV1DatasetsDatasetIdImagesGet(requestParameters.datasetId, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * List all datasets.
         * @summary Get Datasets
         * @param {DatasetsApiGetDatasetsApiV1DatasetsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsApiV1DatasetsGet(requestParameters: DatasetsApiGetDatasetsApiV1DatasetsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DatasetListResponse> {
            return localVarFp.getDatasetsApiV1DatasetsGet(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 데이터셋을 업데이트합니다.
         * @summary Update Dataset
         * @param {DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetApiV1DatasetsDatasetIdPut(requestParameters: DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead> {
            return localVarFp.updateDatasetApiV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatasetsApi - interface
 * @export
 * @interface DatasetsApi
 */
export interface DatasetsApiInterface {
    /**
     * Create a new dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetApiV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    createDatasetApiV1DatasetsPost(requestParameters: DatasetsApiCreateDatasetApiV1DatasetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead>;

    /**
     * 데이터셋을 삭제합니다.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    deleteDatasetApiV1DatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a dataset by id.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    getDatasetApiV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead>;

    /**
     * Get all images in a dataset.
     * @summary Get Dataset Images
     * @param {DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    getDatasetImagesApiV1DatasetsDatasetIdImagesGet(requestParameters: DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageListResponse>;

    /**
     * List all datasets.
     * @summary Get Datasets
     * @param {DatasetsApiGetDatasetsApiV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    getDatasetsApiV1DatasetsGet(requestParameters?: DatasetsApiGetDatasetsApiV1DatasetsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetListResponse>;

    /**
     * 데이터셋을 업데이트합니다.
     * @summary Update Dataset
     * @param {DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    updateDatasetApiV1DatasetsDatasetIdPut(requestParameters: DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<DatasetRead>;

}

/**
 * Request parameters for createDatasetApiV1DatasetsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateDatasetApiV1DatasetsPostRequest
 */
export interface DatasetsApiCreateDatasetApiV1DatasetsPostRequest {
    /**
     * 
     * @type {DatasetCreate}
     * @memberof DatasetsApiCreateDatasetApiV1DatasetsPost
     */
    readonly datasetCreate: DatasetCreate
}

/**
 * Request parameters for deleteDatasetApiV1DatasetsDatasetIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest
 */
export interface DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDelete
     */
    readonly datasetId: number
}

/**
 * Request parameters for getDatasetApiV1DatasetsDatasetIdGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest
 */
export interface DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetApiV1DatasetsDatasetIdGet
     */
    readonly datasetId: number
}

/**
 * Request parameters for getDatasetImagesApiV1DatasetsDatasetIdImagesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest
 */
export interface DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGet
     */
    readonly datasetId: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGet
     */
    readonly limit?: number
}

/**
 * Request parameters for getDatasetsApiV1DatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetsApiV1DatasetsGetRequest
 */
export interface DatasetsApiGetDatasetsApiV1DatasetsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetsApiV1DatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiGetDatasetsApiV1DatasetsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for updateDatasetApiV1DatasetsDatasetIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest
 */
export interface DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPut
     */
    readonly datasetId: number

    /**
     * 
     * @type {DatasetUpdate}
     * @memberof DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPut
     */
    readonly datasetUpdate: DatasetUpdate
}

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI implements DatasetsApiInterface {
    /**
     * Create a new dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetApiV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createDatasetApiV1DatasetsPost(requestParameters: DatasetsApiCreateDatasetApiV1DatasetsPostRequest, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createDatasetApiV1DatasetsPost(requestParameters.datasetCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 데이터셋을 삭제합니다.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteDatasetApiV1DatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetApiV1DatasetsDatasetIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).deleteDatasetApiV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a dataset by id.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetApiV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetApiV1DatasetsDatasetIdGetRequest, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetApiV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all images in a dataset.
     * @summary Get Dataset Images
     * @param {DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetImagesApiV1DatasetsDatasetIdImagesGet(requestParameters: DatasetsApiGetDatasetImagesApiV1DatasetsDatasetIdImagesGetRequest, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetImagesApiV1DatasetsDatasetIdImagesGet(requestParameters.datasetId, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all datasets.
     * @summary Get Datasets
     * @param {DatasetsApiGetDatasetsApiV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetsApiV1DatasetsGet(requestParameters: DatasetsApiGetDatasetsApiV1DatasetsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetsApiV1DatasetsGet(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 데이터셋을 업데이트합니다.
     * @summary Update Dataset
     * @param {DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public updateDatasetApiV1DatasetsDatasetIdPut(requestParameters: DatasetsApiUpdateDatasetApiV1DatasetsDatasetIdPutRequest, options?: RawAxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).updateDatasetApiV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

