/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CurrentUserResponse } from "../models";
// @ts-ignore
import type { HTTPValidationError } from "../models";
// @ts-ignore
import type { UpdateSuiAddressRequest } from "../models";
// @ts-ignore
import type { UpdateSuiAddressResponse } from "../models";
// @ts-ignore
import type { ZkLoginInitRequest } from "../models";
// @ts-ignore
import type { ZkLoginInitResponse } from "../models";
// @ts-ignore
import type { ZkProofRequest } from "../models";
// @ts-ignore
import type { ZkProofResponse } from "../models";
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * ZK proof를 생성하고 Sui 주소를 도출합니다.  1. JWT 토큰 검증 2. 사용자 salt 조회 3. ZK proof 생성 4. Sui 주소 도출 5. 사용자 계정에 Sui 주소 연결
     * @summary Generate Zk Proof
     * @param {ZkProofRequest} zkProofRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateZkProofApiV1AuthZkloginProvePost: async (
      zkProofRequest: ZkProofRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'zkProofRequest' is not null or undefined
      assertParamExists(
        "generateZkProofApiV1AuthZkloginProvePost",
        "zkProofRequest",
        zkProofRequest
      );
      const localVarPath = `/api/v1/auth/zklogin/prove`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        zkProofRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 현재 로그인한 사용자 정보 조회
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeApiV1AuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/auth/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Google OAuth 콜백 처리  1. Authorization code를 access token으로 교환 2. Google 사용자 정보 조회 3. 사용자 생성 또는 업데이트 4. JWT 토큰 생성 및 클라이언트로 리다이렉트
     * @summary Google Callback
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    googleCallbackApiV1AuthGoogleCallbackGet: async (
      code: string,
      state: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'code' is not null or undefined
      assertParamExists("googleCallbackApiV1AuthGoogleCallbackGet", "code", code);
      // verify required parameter 'state' is not null or undefined
      assertParamExists("googleCallbackApiV1AuthGoogleCallbackGet", "state", state);
      const localVarPath = `/api/v1/auth/google/callback`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (state !== undefined) {
        localVarQueryParameter["state"] = state;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 클라이언트에서 생성한 Sui 주소를 사용자 계정에 업데이트합니다.  Args:     request: Sui 주소 업데이트 요청     current_user: 현재 인증된 사용자     db: 데이터베이스 세션      Returns:     UpdateSuiAddressResponse: 업데이트 결과
     * @summary Update Sui Address
     * @param {UpdateSuiAddressRequest} updateSuiAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSuiAddressApiV1AuthSuiAddressPost: async (
      updateSuiAddressRequest: UpdateSuiAddressRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateSuiAddressRequest' is not null or undefined
      assertParamExists(
        "updateSuiAddressApiV1AuthSuiAddressPost",
        "updateSuiAddressRequest",
        updateSuiAddressRequest
      );
      const localVarPath = `/api/v1/auth/sui-address`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateSuiAddressRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * zkLogin 초기화  1. Ephemeral public key를 받아서 nonce 생성 2. Google OAuth URL 생성 및 반환
     * @summary Zklogin Init
     * @param {ZkLoginInitRequest} zkLoginInitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    zkloginInitApiV1AuthZkloginInitPost: async (
      zkLoginInitRequest: ZkLoginInitRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'zkLoginInitRequest' is not null or undefined
      assertParamExists(
        "zkloginInitApiV1AuthZkloginInitPost",
        "zkLoginInitRequest",
        zkLoginInitRequest
      );
      const localVarPath = `/api/v1/auth/zklogin/init`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        zkLoginInitRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     * ZK proof를 생성하고 Sui 주소를 도출합니다.  1. JWT 토큰 검증 2. 사용자 salt 조회 3. ZK proof 생성 4. Sui 주소 도출 5. 사용자 계정에 Sui 주소 연결
     * @summary Generate Zk Proof
     * @param {ZkProofRequest} zkProofRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateZkProofApiV1AuthZkloginProvePost(
      zkProofRequest: ZkProofRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZkProofResponse>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.generateZkProofApiV1AuthZkloginProvePost(
          zkProofRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.generateZkProofApiV1AuthZkloginProvePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 현재 로그인한 사용자 정보 조회
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeApiV1AuthMeGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMeApiV1AuthMeGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.getMeApiV1AuthMeGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Google OAuth 콜백 처리  1. Authorization code를 access token으로 교환 2. Google 사용자 정보 조회 3. 사용자 생성 또는 업데이트 4. JWT 토큰 생성 및 클라이언트로 리다이렉트
     * @summary Google Callback
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async googleCallbackApiV1AuthGoogleCallbackGet(
      code: string,
      state: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.googleCallbackApiV1AuthGoogleCallbackGet(
          code,
          state,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.googleCallbackApiV1AuthGoogleCallbackGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 클라이언트에서 생성한 Sui 주소를 사용자 계정에 업데이트합니다.  Args:     request: Sui 주소 업데이트 요청     current_user: 현재 인증된 사용자     db: 데이터베이스 세션      Returns:     UpdateSuiAddressResponse: 업데이트 결과
     * @summary Update Sui Address
     * @param {UpdateSuiAddressRequest} updateSuiAddressRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSuiAddressApiV1AuthSuiAddressPost(
      updateSuiAddressRequest: UpdateSuiAddressRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateSuiAddressResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateSuiAddressApiV1AuthSuiAddressPost(
          updateSuiAddressRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.updateSuiAddressApiV1AuthSuiAddressPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * zkLogin 초기화  1. Ephemeral public key를 받아서 nonce 생성 2. Google OAuth URL 생성 및 반환
     * @summary Zklogin Init
     * @param {ZkLoginInitRequest} zkLoginInitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async zkloginInitApiV1AuthZkloginInitPost(
      zkLoginInitRequest: ZkLoginInitRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZkLoginInitResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.zkloginInitApiV1AuthZkloginInitPost(
        zkLoginInitRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.zkloginInitApiV1AuthZkloginInitPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     * ZK proof를 생성하고 Sui 주소를 도출합니다.  1. JWT 토큰 검증 2. 사용자 salt 조회 3. ZK proof 생성 4. Sui 주소 도출 5. 사용자 계정에 Sui 주소 연결
     * @summary Generate Zk Proof
     * @param {AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateZkProofApiV1AuthZkloginProvePost(
      requestParameters: AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ZkProofResponse> {
      return localVarFp
        .generateZkProofApiV1AuthZkloginProvePost(requestParameters.zkProofRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     * 현재 로그인한 사용자 정보 조회
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeApiV1AuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<CurrentUserResponse> {
      return localVarFp.getMeApiV1AuthMeGet(options).then(request => request(axios, basePath));
    },
    /**
     * Google OAuth 콜백 처리  1. Authorization code를 access token으로 교환 2. Google 사용자 정보 조회 3. 사용자 생성 또는 업데이트 4. JWT 토큰 생성 및 클라이언트로 리다이렉트
     * @summary Google Callback
     * @param {AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    googleCallbackApiV1AuthGoogleCallbackGet(
      requestParameters: AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .googleCallbackApiV1AuthGoogleCallbackGet(
          requestParameters.code,
          requestParameters.state,
          options
        )
        .then(request => request(axios, basePath));
    },
    /**
     * 클라이언트에서 생성한 Sui 주소를 사용자 계정에 업데이트합니다.  Args:     request: Sui 주소 업데이트 요청     current_user: 현재 인증된 사용자     db: 데이터베이스 세션      Returns:     UpdateSuiAddressResponse: 업데이트 결과
     * @summary Update Sui Address
     * @param {AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSuiAddressApiV1AuthSuiAddressPost(
      requestParameters: AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UpdateSuiAddressResponse> {
      return localVarFp
        .updateSuiAddressApiV1AuthSuiAddressPost(requestParameters.updateSuiAddressRequest, options)
        .then(request => request(axios, basePath));
    },
    /**
     * zkLogin 초기화  1. Ephemeral public key를 받아서 nonce 생성 2. Google OAuth URL 생성 및 반환
     * @summary Zklogin Init
     * @param {AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    zkloginInitApiV1AuthZkloginInitPost(
      requestParameters: AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ZkLoginInitResponse> {
      return localVarFp
        .zkloginInitApiV1AuthZkloginInitPost(requestParameters.zkLoginInitRequest, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
  /**
   * ZK proof를 생성하고 Sui 주소를 도출합니다.  1. JWT 토큰 검증 2. 사용자 salt 조회 3. ZK proof 생성 4. Sui 주소 도출 5. 사용자 계정에 Sui 주소 연결
   * @summary Generate Zk Proof
   * @param {AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  generateZkProofApiV1AuthZkloginProvePost(
    requestParameters: AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ZkProofResponse>;

  /**
   * 현재 로그인한 사용자 정보 조회
   * @summary Get Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  getMeApiV1AuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<CurrentUserResponse>;

  /**
   * Google OAuth 콜백 처리  1. Authorization code를 access token으로 교환 2. Google 사용자 정보 조회 3. 사용자 생성 또는 업데이트 4. JWT 토큰 생성 및 클라이언트로 리다이렉트
   * @summary Google Callback
   * @param {AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  googleCallbackApiV1AuthGoogleCallbackGet(
    requestParameters: AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>;

  /**
   * 클라이언트에서 생성한 Sui 주소를 사용자 계정에 업데이트합니다.  Args:     request: Sui 주소 업데이트 요청     current_user: 현재 인증된 사용자     db: 데이터베이스 세션      Returns:     UpdateSuiAddressResponse: 업데이트 결과
   * @summary Update Sui Address
   * @param {AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  updateSuiAddressApiV1AuthSuiAddressPost(
    requestParameters: AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UpdateSuiAddressResponse>;

  /**
   * zkLogin 초기화  1. Ephemeral public key를 받아서 nonce 생성 2. Google OAuth URL 생성 및 반환
   * @summary Zklogin Init
   * @param {AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  zkloginInitApiV1AuthZkloginInitPost(
    requestParameters: AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ZkLoginInitResponse>;
}

/**
 * Request parameters for generateZkProofApiV1AuthZkloginProvePost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest
 */
export interface AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest {
  /**
   *
   * @type {ZkProofRequest}
   * @memberof AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePost
   */
  readonly zkProofRequest: ZkProofRequest;
}

/**
 * Request parameters for googleCallbackApiV1AuthGoogleCallbackGet operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest
 */
export interface AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest {
  /**
   *
   * @type {string}
   * @memberof AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGet
   */
  readonly code: string;

  /**
   *
   * @type {string}
   * @memberof AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGet
   */
  readonly state: string;
}

/**
 * Request parameters for updateSuiAddressApiV1AuthSuiAddressPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest
 */
export interface AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest {
  /**
   *
   * @type {UpdateSuiAddressRequest}
   * @memberof AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPost
   */
  readonly updateSuiAddressRequest: UpdateSuiAddressRequest;
}

/**
 * Request parameters for zkloginInitApiV1AuthZkloginInitPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest
 */
export interface AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest {
  /**
   *
   * @type {ZkLoginInitRequest}
   * @memberof AuthenticationApiZkloginInitApiV1AuthZkloginInitPost
   */
  readonly zkLoginInitRequest: ZkLoginInitRequest;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
  /**
   * ZK proof를 생성하고 Sui 주소를 도출합니다.  1. JWT 토큰 검증 2. 사용자 salt 조회 3. ZK proof 생성 4. Sui 주소 도출 5. 사용자 계정에 Sui 주소 연결
   * @summary Generate Zk Proof
   * @param {AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public generateZkProofApiV1AuthZkloginProvePost(
    requestParameters: AuthenticationApiGenerateZkProofApiV1AuthZkloginProvePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .generateZkProofApiV1AuthZkloginProvePost(requestParameters.zkProofRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * 현재 로그인한 사용자 정보 조회
   * @summary Get Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public getMeApiV1AuthMeGet(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .getMeApiV1AuthMeGet(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Google OAuth 콜백 처리  1. Authorization code를 access token으로 교환 2. Google 사용자 정보 조회 3. 사용자 생성 또는 업데이트 4. JWT 토큰 생성 및 클라이언트로 리다이렉트
   * @summary Google Callback
   * @param {AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public googleCallbackApiV1AuthGoogleCallbackGet(
    requestParameters: AuthenticationApiGoogleCallbackApiV1AuthGoogleCallbackGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .googleCallbackApiV1AuthGoogleCallbackGet(
        requestParameters.code,
        requestParameters.state,
        options
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * 클라이언트에서 생성한 Sui 주소를 사용자 계정에 업데이트합니다.  Args:     request: Sui 주소 업데이트 요청     current_user: 현재 인증된 사용자     db: 데이터베이스 세션      Returns:     UpdateSuiAddressResponse: 업데이트 결과
   * @summary Update Sui Address
   * @param {AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public updateSuiAddressApiV1AuthSuiAddressPost(
    requestParameters: AuthenticationApiUpdateSuiAddressApiV1AuthSuiAddressPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .updateSuiAddressApiV1AuthSuiAddressPost(requestParameters.updateSuiAddressRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * zkLogin 초기화  1. Ephemeral public key를 받아서 nonce 생성 2. Google OAuth URL 생성 및 반환
   * @summary Zklogin Init
   * @param {AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public zkloginInitApiV1AuthZkloginInitPost(
    requestParameters: AuthenticationApiZkloginInitApiV1AuthZkloginInitPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .zkloginInitApiV1AuthZkloginInitPost(requestParameters.zkLoginInitRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}
