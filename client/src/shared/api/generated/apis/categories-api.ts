/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CategoryCreate } from '../models';
// @ts-ignore
import type { CategoryRead } from '../models';
// @ts-ignore
import type { CategoryUpdate } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new category.
         * @summary Create Category
         * @param {CategoryCreate} categoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryApiV1CategoriesPost: async (categoryCreate: CategoryCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryCreate' is not null or undefined
            assertParamExists('createCategoryApiV1CategoriesPost', 'categoryCreate', categoryCreate)
            const localVarPath = `/api/v1/categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific category.
         * @summary Delete Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryApiV1CategoriesCategoryIdDelete: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategoryApiV1CategoriesCategoryIdDelete', 'categoryId', categoryId)
            const localVarPath = `/api/v1/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific category.
         * @summary Get Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryApiV1CategoriesCategoryIdGet: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategoryApiV1CategoriesCategoryIdGet', 'categoryId', categoryId)
            const localVarPath = `/api/v1/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific category.
         * @summary Update Category
         * @param {number} categoryId 
         * @param {CategoryUpdate} categoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryApiV1CategoriesCategoryIdPut: async (categoryId: number, categoryUpdate: CategoryUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategoryApiV1CategoriesCategoryIdPut', 'categoryId', categoryId)
            // verify required parameter 'categoryUpdate' is not null or undefined
            assertParamExists('updateCategoryApiV1CategoriesCategoryIdPut', 'categoryUpdate', categoryUpdate)
            const localVarPath = `/api/v1/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new category.
         * @summary Create Category
         * @param {CategoryCreate} categoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategoryApiV1CategoriesPost(categoryCreate: CategoryCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategoryApiV1CategoriesPost(categoryCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.createCategoryApiV1CategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific category.
         * @summary Delete Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryApiV1CategoriesCategoryIdDelete(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoryApiV1CategoriesCategoryIdDelete(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.deleteCategoryApiV1CategoriesCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific category.
         * @summary Get Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryApiV1CategoriesCategoryIdGet(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryApiV1CategoriesCategoryIdGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.getCategoryApiV1CategoriesCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific category.
         * @summary Update Category
         * @param {number} categoryId 
         * @param {CategoryUpdate} categoryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryApiV1CategoriesCategoryIdPut(categoryId: number, categoryUpdate: CategoryUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategoryApiV1CategoriesCategoryIdPut(categoryId, categoryUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.updateCategoryApiV1CategoriesCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Create a new category.
         * @summary Create Category
         * @param {CategoriesApiCreateCategoryApiV1CategoriesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategoryApiV1CategoriesPost(requestParameters: CategoriesApiCreateCategoryApiV1CategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead> {
            return localVarFp.createCategoryApiV1CategoriesPost(requestParameters.categoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific category.
         * @summary Delete Category
         * @param {CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryApiV1CategoriesCategoryIdDelete(requestParameters: CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteCategoryApiV1CategoriesCategoryIdDelete(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific category.
         * @summary Get Category
         * @param {CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryApiV1CategoriesCategoryIdGet(requestParameters: CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead> {
            return localVarFp.getCategoryApiV1CategoriesCategoryIdGet(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific category.
         * @summary Update Category
         * @param {CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryApiV1CategoriesCategoryIdPut(requestParameters: CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead> {
            return localVarFp.updateCategoryApiV1CategoriesCategoryIdPut(requestParameters.categoryId, requestParameters.categoryUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - interface
 * @export
 * @interface CategoriesApi
 */
export interface CategoriesApiInterface {
    /**
     * Create a new category.
     * @summary Create Category
     * @param {CategoriesApiCreateCategoryApiV1CategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    createCategoryApiV1CategoriesPost(requestParameters: CategoriesApiCreateCategoryApiV1CategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead>;

    /**
     * Delete a specific category.
     * @summary Delete Category
     * @param {CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    deleteCategoryApiV1CategoriesCategoryIdDelete(requestParameters: CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get a specific category.
     * @summary Get Category
     * @param {CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryApiV1CategoriesCategoryIdGet(requestParameters: CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead>;

    /**
     * Update a specific category.
     * @summary Update Category
     * @param {CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    updateCategoryApiV1CategoriesCategoryIdPut(requestParameters: CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryRead>;

}

/**
 * Request parameters for createCategoryApiV1CategoriesPost operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCreateCategoryApiV1CategoriesPostRequest
 */
export interface CategoriesApiCreateCategoryApiV1CategoriesPostRequest {
    /**
     * 
     * @type {CategoryCreate}
     * @memberof CategoriesApiCreateCategoryApiV1CategoriesPost
     */
    readonly categoryCreate: CategoryCreate
}

/**
 * Request parameters for deleteCategoryApiV1CategoriesCategoryIdDelete operation in CategoriesApi.
 * @export
 * @interface CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest
 */
export interface CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDelete
     */
    readonly categoryId: number
}

/**
 * Request parameters for getCategoryApiV1CategoriesCategoryIdGet operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest
 */
export interface CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoriesApiGetCategoryApiV1CategoriesCategoryIdGet
     */
    readonly categoryId: number
}

/**
 * Request parameters for updateCategoryApiV1CategoriesCategoryIdPut operation in CategoriesApi.
 * @export
 * @interface CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest
 */
export interface CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPut
     */
    readonly categoryId: number

    /**
     * 
     * @type {CategoryUpdate}
     * @memberof CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPut
     */
    readonly categoryUpdate: CategoryUpdate
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI implements CategoriesApiInterface {
    /**
     * Create a new category.
     * @summary Create Category
     * @param {CategoriesApiCreateCategoryApiV1CategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public createCategoryApiV1CategoriesPost(requestParameters: CategoriesApiCreateCategoryApiV1CategoriesPostRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).createCategoryApiV1CategoriesPost(requestParameters.categoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific category.
     * @summary Delete Category
     * @param {CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public deleteCategoryApiV1CategoriesCategoryIdDelete(requestParameters: CategoriesApiDeleteCategoryApiV1CategoriesCategoryIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).deleteCategoryApiV1CategoriesCategoryIdDelete(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific category.
     * @summary Get Category
     * @param {CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategoryApiV1CategoriesCategoryIdGet(requestParameters: CategoriesApiGetCategoryApiV1CategoriesCategoryIdGetRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategoryApiV1CategoriesCategoryIdGet(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific category.
     * @summary Update Category
     * @param {CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public updateCategoryApiV1CategoriesCategoryIdPut(requestParameters: CategoriesApiUpdateCategoryApiV1CategoriesCategoryIdPutRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).updateCategoryApiV1CategoriesCategoryIdPut(requestParameters.categoryId, requestParameters.categoryUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

