/* tslint:disable */
/* eslint-disable */
/**
 * OpenGraph API
 * AI/ML model and dataset Web3 blockchain infrastructure server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CategoryListResponse } from '../models';
// @ts-ignore
import type { DictionaryCategoryCreate } from '../models';
// @ts-ignore
import type { DictionaryCategoryRead } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * DictionaryCategoriesApi - axios parameter creator
 * @export
 */
export const DictionaryCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new dictionary-category association.
         * @summary Create Dictionary Category
         * @param {DictionaryCategoryCreate} dictionaryCategoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDictionaryCategoryApiV1DictionaryCategoriesPost: async (dictionaryCategoryCreate: DictionaryCategoryCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryCategoryCreate' is not null or undefined
            assertParamExists('createDictionaryCategoryApiV1DictionaryCategoriesPost', 'dictionaryCategoryCreate', dictionaryCategoryCreate)
            const localVarPath = `/api/v1/dictionary-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dictionaryCategoryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a dictionary-category association.
         * @summary Delete Dictionary Category
         * @param {number} dictionaryId 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete: async (dictionaryId: number, categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryId' is not null or undefined
            assertParamExists('deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete', 'dictionaryId', dictionaryId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete', 'categoryId', categoryId)
            const localVarPath = `/api/v1/dictionary-categories/{dictionary_id}/{category_id}`
                .replace(`{${"dictionary_id"}}`, encodeURIComponent(String(dictionaryId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all categories related to a dictionary.
         * @summary Get Dictionary Categories
         * @param {number} dictionaryId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet: async (dictionaryId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryId' is not null or undefined
            assertParamExists('getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet', 'dictionaryId', dictionaryId)
            const localVarPath = `/api/v1/dictionary-categories/{dictionary_id}`
                .replace(`{${"dictionary_id"}}`, encodeURIComponent(String(dictionaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DictionaryCategoriesApi - functional programming interface
 * @export
 */
export const DictionaryCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DictionaryCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new dictionary-category association.
         * @summary Create Dictionary Category
         * @param {DictionaryCategoryCreate} dictionaryCategoryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDictionaryCategoryApiV1DictionaryCategoriesPost(dictionaryCategoryCreate: DictionaryCategoryCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DictionaryCategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDictionaryCategoryApiV1DictionaryCategoriesPost(dictionaryCategoryCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DictionaryCategoriesApi.createDictionaryCategoryApiV1DictionaryCategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a dictionary-category association.
         * @summary Delete Dictionary Category
         * @param {number} dictionaryId 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(dictionaryId: number, categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(dictionaryId, categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DictionaryCategoriesApi.deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all categories related to a dictionary.
         * @summary Get Dictionary Categories
         * @param {number} dictionaryId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(dictionaryId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(dictionaryId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DictionaryCategoriesApi.getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DictionaryCategoriesApi - factory interface
 * @export
 */
export const DictionaryCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DictionaryCategoriesApiFp(configuration)
    return {
        /**
         * Create a new dictionary-category association.
         * @summary Create Dictionary Category
         * @param {DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDictionaryCategoryApiV1DictionaryCategoriesPost(requestParameters: DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryCategoryRead> {
            return localVarFp.createDictionaryCategoryApiV1DictionaryCategoriesPost(requestParameters.dictionaryCategoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a dictionary-category association.
         * @summary Delete Dictionary Category
         * @param {DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(requestParameters: DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(requestParameters.dictionaryId, requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all categories related to a dictionary.
         * @summary Get Dictionary Categories
         * @param {DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(requestParameters: DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResponse> {
            return localVarFp.getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(requestParameters.dictionaryId, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DictionaryCategoriesApi - interface
 * @export
 * @interface DictionaryCategoriesApi
 */
export interface DictionaryCategoriesApiInterface {
    /**
     * Create a new dictionary-category association.
     * @summary Create Dictionary Category
     * @param {DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApiInterface
     */
    createDictionaryCategoryApiV1DictionaryCategoriesPost(requestParameters: DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DictionaryCategoryRead>;

    /**
     * Delete a dictionary-category association.
     * @summary Delete Dictionary Category
     * @param {DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApiInterface
     */
    deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(requestParameters: DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * List all categories related to a dictionary.
     * @summary Get Dictionary Categories
     * @param {DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApiInterface
     */
    getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(requestParameters: DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResponse>;

}

/**
 * Request parameters for createDictionaryCategoryApiV1DictionaryCategoriesPost operation in DictionaryCategoriesApi.
 * @export
 * @interface DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest
 */
export interface DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest {
    /**
     * 
     * @type {DictionaryCategoryCreate}
     * @memberof DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPost
     */
    readonly dictionaryCategoryCreate: DictionaryCategoryCreate
}

/**
 * Request parameters for deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete operation in DictionaryCategoriesApi.
 * @export
 * @interface DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest
 */
export interface DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete
     */
    readonly dictionaryId: number

    /**
     * 
     * @type {number}
     * @memberof DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete
     */
    readonly categoryId: number
}

/**
 * Request parameters for getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet operation in DictionaryCategoriesApi.
 * @export
 * @interface DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest
 */
export interface DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet
     */
    readonly dictionaryId: number

    /**
     * 
     * @type {number}
     * @memberof DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet
     */
    readonly limit?: number
}

/**
 * DictionaryCategoriesApi - object-oriented interface
 * @export
 * @class DictionaryCategoriesApi
 * @extends {BaseAPI}
 */
export class DictionaryCategoriesApi extends BaseAPI implements DictionaryCategoriesApiInterface {
    /**
     * Create a new dictionary-category association.
     * @summary Create Dictionary Category
     * @param {DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApi
     */
    public createDictionaryCategoryApiV1DictionaryCategoriesPost(requestParameters: DictionaryCategoriesApiCreateDictionaryCategoryApiV1DictionaryCategoriesPostRequest, options?: RawAxiosRequestConfig) {
        return DictionaryCategoriesApiFp(this.configuration).createDictionaryCategoryApiV1DictionaryCategoriesPost(requestParameters.dictionaryCategoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a dictionary-category association.
     * @summary Delete Dictionary Category
     * @param {DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApi
     */
    public deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(requestParameters: DictionaryCategoriesApiDeleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DictionaryCategoriesApiFp(this.configuration).deleteDictionaryCategoryApiV1DictionaryCategoriesDictionaryIdCategoryIdDelete(requestParameters.dictionaryId, requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all categories related to a dictionary.
     * @summary Get Dictionary Categories
     * @param {DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryCategoriesApi
     */
    public getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(requestParameters: DictionaryCategoriesApiGetDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGetRequest, options?: RawAxiosRequestConfig) {
        return DictionaryCategoriesApiFp(this.configuration).getDictionaryCategoriesApiV1DictionaryCategoriesDictionaryIdGet(requestParameters.dictionaryId, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

