services:
  # PostgreSQL Database for Development
  postgres:
    image: postgres:15
    container_name: opengraph-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - opengraph_postgres_data:/var/lib/postgresql/data
    networks:
      - opengraph-backend-network
    command: postgres -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Backend Server for Development
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: opengraph-server
    ports:
      - "8080:8080"
    environment:
      PORT: ${SERVER_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opengraph-backend-network
      - opengraph-frontend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend Client
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile.dev
      args:
        VITE_SERVER_BASE_URL: ${CLIENT_VITE_SERVER_BASE_URL}
        VITE_CONVERTER_BASE_URL: ${CLIENT_VITE_CONVERTER_BASE_URL}
    container_name: opengraph-client
    ports:
      - "80:80"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
      - converter
    environment:
      - VITE_CONVERTER_BASE_URL=${CLIENT_VITE_CONVERTER_BASE_URL}
      - VITE_SERVER_BASE_URL=${CLIENT_VITE_SERVER_BASE_URL}
    networks:
      - opengraph-frontend-network

networks:
  opengraph-backend-network:
    driver: bridge
  opengraph-frontend-network:
    driver: bridge

volumes:
  opengraph_postgres_data: