services:
  # PostgreSQL Database for Development
  postgres:
    image: postgres:15
    container_name: opengraph-postgres-dev
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - opengraph_postgres_data:/var/lib/postgresql/data
    networks:
      - opengraph-network
    command: postgres -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # DB Migration Service for Development
  migration:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: opengraph-migration-dev
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./server:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opengraph-network
    command: ["alembic", "upgrade", "head"]
    restart: "no"

  # Python FastAPI Backend Server for Development
  fastapi:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: opengraph-fastapi-dev
    ports:
      - "8000:8000"
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CLIENT_URL: ${CLIENT_URL}
      SERVER_URL: ${SERVER_URL}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      APP_NAME: ${APP_NAME}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      DEBUG: "true"
    volumes:
      - ./server:/app
      - ./server/secrets:/app/secrets
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - opengraph-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
#    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Prometheus for Development
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: opengraph-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - opengraph_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - fastapi
    networks:
      - opengraph-network

  # Grafana for Development  
  grafana:
    image: grafana/grafana:10.1.0
    container_name: opengraph-grafana-dev
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - opengraph_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - opengraph-network

  # React Frontend Client for Development
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile.dev
      args:
        VITE_SERVER_BASE_URL: ${VITE_SERVER_BASE_URL}
    container_name: opengraph-client-dev
    ports:
      - "3001:80"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - fastapi
    environment:
      - VITE_SERVER_BASE_URL=${VITE_SERVER_BASE_URL}
    networks:
      - opengraph-network

networks:
  opengraph-network:
    driver: bridge

volumes:
  opengraph_postgres_data:
  opengraph_prometheus_data:
  opengraph_grafana_data: